<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on trootski</title><link>https://trootski.github.io/tags/java/</link><description>Recent content in Java on trootski</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://trootski.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>What I wished I'd known before working with Apache Camel</title><link>https://trootski.github.io/post/2021/12/what-i-wished-id-known-before-working-with-apache-camel/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://trootski.github.io/post/2021/12/what-i-wished-id-known-before-working-with-apache-camel/</guid><description>I recently started working on an Apache Camel project at work. The application in question would, I imagine, have been an atypical use case for Apache Camel. It was used primarily for the DSL definition of a series of RESTful calls to dependent services. These routes were leveraged by the applicationâ€™s controller layer.
My approach at the beginning and my approach by the end were pretty different.
Unless stated the below are examples are taken from the Apache Camel Wish I&amp;rsquo;d Known sample code on GitHub.</description></item><item><title>Bond Project</title><link>https://trootski.github.io/post/2021/01/bond-project/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><guid>https://trootski.github.io/post/2021/01/bond-project/</guid><description>While looking at various microservice patterns I found I wanted a playground for playing with components of a microservice based system in isolation.
Coincidentally, in the halcyon days of winter 2019 I got an idea to binge all the James Bond films. Over the years I had seen them all. I generally watched them on television but never in any order and usually having missed the start. After having re-watched one of the movies I wrote down a very short hot take on each film.</description></item><item><title>Spring Handle Constraint Violation</title><link>https://trootski.github.io/post/2020/12/</link><pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate><guid>https://trootski.github.io/post/2020/12/</guid><description>My team recently had a requirement to build a persistence mechanism that had a unique constraint on a combination of columns. It needed to behave in an idempotent manner. If the same request was received to created an entity multiple times it would simply respond that the items existed. I spent a considerable amount of effort researching a solution and wound up with something immeasurably simpler than some of my early stabs at it.</description></item></channel></rss>